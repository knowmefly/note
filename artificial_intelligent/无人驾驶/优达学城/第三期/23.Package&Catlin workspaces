# Add a Package
1. git clone
2. catkin_make
3. sudo apt-get install ros-kinetic-controller-manager
4. catkin_make
# Roslaunch
$ cd ~/catkin_ws
$ catkin_make
$ source devel/setup.bash
$ roslaunch simple_arm robot_spawn.launch
# Dive Deeper into Packages
I mentioned earlier that ROS packages have a conventional directory structure. Let’s take a look at a more typical package.

- scripts (python executables)
- src (C++ source files)
- msg (for custom message definitions)
- srv (for service message definitions)
- include -> headers/libraries that are needed as dependencies
- config -> configuration files
- launch -> provide a more automated way of starting nodes

Other folders may include

- urdf (Universal Robot Description Files)
- meshes (CAD files in .dae (Collada) or .stl (STereoLithography) format)
- worlds (XML like files that are used for Gazebo simulation environments)
![文档结构](https://gitee.com/knowmefly/little_book_maker/raw/master/小书匠/1578127633609.png)
# ROS L2 Recap
You now have some experience

- Creating workspaces
- Adding packages
- Managing Dependencies
- Troubleshooting build errors.
