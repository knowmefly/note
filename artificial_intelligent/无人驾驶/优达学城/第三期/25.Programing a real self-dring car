# Project Overview
![程序框图](https://gitee.com/knowmefly/little_book_maker/raw/master/小书匠/1578130276279.png)

==(path_to_project_repo)/ros/src/tl_detector/==
交通信号灯检测
![tl-detector node](https://gitee.com/knowmefly/little_book_maker/raw/master/小书匠/1578130482290.png)

==(path_to_project_repo)/ros/src/twist_controller/==
行驶控制系统
drive-by-wire (dbw) system
![DBW-system](https://gitee.com/knowmefly/little_book_maker/raw/master/小书匠/1578130719296.png)

# Waypoint Updater Node (Partial)
#### Waypoint Updater Node Overview
The eventual purpose of this node is to publish a fixed number of waypoints ahead of the vehicle with the correct target velocities, depending on traffic lights and obstacles. The goal for the first version of the node should be simply to subscribe to the topics

- /base_waypoints
- /current_pose
- 
and publish a list of waypoints to

- /final_waypoints
#### Waypoint Message Descriptions
This section will demonstrate use of rostopic and rosmsg to learn more about the messages being transmitted on /base_waypoints and /final_waypoints.

#### Lane message example
As a use-case example, given a single styx_msgs/Lane message my_lane_msg, you can access the x direction linear velocity of the first waypoint in Python with:

my_lane_msg[0].twist.twist.linear.x

Note that the coordinates for linear velocity are vehicle-centered, so only the x-direction linear velocity should be nonzero.

#### Topics and message types
For convenience, we have provided the following table with topic and message info for this step of the project:
![topics and message types](https://gitee.com/knowmefly/little_book_maker/raw/master/小书匠/1578131911106.png)

# Traffic Light Detection Node
Your task for this portion of the project can be broken into two steps:

1. Use the vehicle's location and the (x, y) coordinates for traffic light stop lines to find the nearest visible traffic light ahead of the vehicle. This takes place in the process_traffic_lights method of tl_detector.py. You will want to use the get_closest_waypoint method to find the closest waypoints to the vehicle and lights. Using these waypoint indices, you can determine which light is ahead of the vehicle along the list of waypoints.
2. Use the camera image data to classify the color of the traffic light. The core functionality of this step takes place in the get_light_state method of tl_detector.py. There are a number of approaches you could take for this task. One of the simpler approaches is to train a deep learning classifier to classify the entire image as containing either a red light, yellow light, green light, or no light. One resource that's available to you is the traffic light's position in 3D space via the vehicle/traffic_lights topic.

Note that the code to publish the results of process_traffic_lights is written for you already in the image_cb method.

#### Traffic Light Detection package files
Within the traffic light detection package, you will find the following:

- tl_detector.py
This python file processes the incoming traffic light data and camera images. It uses the light classifier to get a color prediction, and publishes the location of any upcoming red lights.

- tl_classifier.py
This file contains the TLClassifier class. You can use this class to implement traffic light classification. For example, the get_classification method can take a camera image as input and return an ID corresponding to the color state of the traffic light in the image. Note that it is not required for you to use this class. It only exists to help you break down the classification problem into more manageable chunks. Also note that Carla currently has TensorFlow 1.3.0 installed. If you are using TensorFlow, please be sure to test your code with this version before submission.

- traffic_light_config
This config file contains information about the camera (such as focal length) and the 2D position of the traffic lights's stop line in world coordinates.


# 26.Completing the program
The following projects are required for graduation:
- Finding Lane Lines on the Road
- Traffic Sign Classifier
- Behavioral Cloning
- Advanced Lane Finding
- Vehicle Detection and Tracking
- Extended Kalman Filters
- Unscented Kalman Filters
- Kidnapped Vehicle
- PID Controller
- Model Predictive Control
- Path Planning Project
- Elective Project: Semantic Segmentation OR Functional Safety of a Lane Assistance System
- A submission of the Programming a Real Self-Driving Car

